{"version":3,"file":"reprojection-by-code.js","mappings":"uNAYA,MAAMA,EAAY,IAAI,IAEhBC,EAAa,IAAI,IAAU,CAC/BC,OAAQ,IAAI,IAAU,CACpBC,SAAUH,EAAUI,cACpBC,WAAYL,EAAUM,kBAExBC,SAAS,IAGLC,EAAY,IAAI,IAAU,CAE9BC,YAAa,IAAI,IAAO,CACtBC,MAAO,sBACPC,MAAO,EACPC,SAAU,CAAC,GAAK,KAElBC,YAAY,EACZN,SAAS,EACTO,OAAO,IAGHC,EAAM,IAAI,IAAI,CAClBC,OAAQ,CACN,IAAI,IAAU,CACZd,OAAQF,IAEVC,EACAO,GAEFS,OAAQ,MACRC,KAAM,IAAI,KAAK,CACbb,WAAY,YACZc,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIJC,EAAaC,SAASC,eAAe,cACrCC,EAAeF,SAASC,eAAe,eACvCE,EAAaH,SAASC,eAAe,eACrCG,EAAsBJ,SAASC,eAAe,gBAC9CI,EAAoBL,SAASC,eAAe,cAC5CK,EAAwBN,SAASC,eAAe,kBAEtD,SAASM,EAAcC,EAAMC,EAAMC,EAAUC,GAC3C,GAAa,OAATH,GAA0B,OAATC,GAA8B,OAAbC,GAA8B,OAATC,EASzD,OARAR,EAAWS,UAAY,gDACvBnB,EAAIoB,QACF,IAAI,KAAK,CACP9B,WAAY,YACZc,OAAQ,CAAC,EAAG,GACZC,KAAM,KAMZK,EAAWS,UAAY,IAAMJ,EAAO,KAAOC,EAE3C,MAAMK,EAAc,QAAUN,EAC9B,IAAMO,KAAKD,EAAaJ,IACxB,QAAS,KACT,MAAMM,GAAU,QAAcF,GACxBG,GAAa,QAAa,YAAaD,GAE7C,IAAIE,EAAc,CAACP,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,IACnDK,EAAQG,eAAeD,GAInBP,EAAK,GAAKA,EAAK,KACjBO,EAAc,CAACP,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAK,IAAKA,EAAK,KAEvD,MAAMS,GAAS,QAAeF,EAAaD,OAAYI,EAAW,GAClEL,EAAQM,UAAUF,GAClB,MAAMG,EAAU,IAAI,KAAK,CACvBxC,WAAYiC,IAEdvB,EAAIoB,QAAQU,GACZA,EAAQC,IAAIJ,EACd,CAgDA,SAASK,IACP/C,EAAUgD,2BAA2BtB,EAAoBuB,QAC3D,CACA,SAASC,IACP1C,EAAU2C,WAAWvB,EAAsBqB,QAC7C,CACA,SAASG,IACPnD,EAAWkD,WAAWxB,EAAkBsB,QAC1C,CAhBAzB,EAAa6B,QAAU,SAAUC,GAtCjC,IAAgBC,IAuCPlC,EAAWmC,MAtClB/B,EAAWS,UAAY,gBACvBuB,MAAM,kCAAoCF,GACvCG,MAAK,SAAUC,GACd,OAAOA,EAASC,MAClB,IACCF,MAAK,SAAUE,GACd,MAAMC,EAAUD,EAAc,QAC9B,GAAIC,GAAWA,EAAQC,OAAS,EAC9B,IAAK,IAAIC,EAAI,EAAGC,EAAKH,EAAQC,OAAQC,EAAIC,EAAID,IAAK,CAChD,MAAME,EAASJ,EAAQE,GACvB,GAAIE,EAAQ,CACV,MAAMnC,EAAOmC,EAAa,KACpBlC,EAAOkC,EAAa,KACpBjC,EAAWiC,EAAY,IACvBhC,EAAOgC,EAAa,KAC1B,GACEnC,GACAA,EAAKgC,OAAS,GACd9B,GACAA,EAAS8B,OAAS,GAClB7B,GACe,GAAfA,EAAK6B,OAGL,YADAjC,EAAcC,EAAMC,EAAMC,EAAUC,EAGxC,CACF,CAEFJ,EAAc,KAAM,KAAM,KAAM,KAClC,IASFyB,EAAMY,gBACR,EAcAtC,EAAsBuC,iBAAiB,SAAUjB,GACjDxB,EAAoByC,iBAAiB,SAAUpB,GAC/CpB,EAAkBwC,iBAAiB,SAAUf,GAE7CL,IACAG,IACAE,G","sources":["webpack:///./reprojection-by-code.js"],"sourcesContent":["import Graticule from '../src/ol/layer/Graticule.js';\nimport Map from '../src/ol/Map.js';\nimport OSM from '../src/ol/source/OSM.js';\nimport Stroke from '../src/ol/style/Stroke.js';\nimport TileDebug from '../src/ol/source/TileDebug.js';\nimport TileLayer from '../src/ol/layer/Tile.js';\nimport View from '../src/ol/View.js';\nimport proj4 from 'proj4';\nimport {applyTransform} from '../src/ol/extent.js';\nimport {get as getProjection, getTransform} from '../src/ol/proj.js';\nimport {register} from '../src/ol/proj/proj4.js';\n\nconst osmSource = new OSM();\n\nconst debugLayer = new TileLayer({\n  source: new TileDebug({\n    tileGrid: osmSource.getTileGrid(),\n    projection: osmSource.getProjection(),\n  }),\n  visible: false,\n});\n\nconst graticule = new Graticule({\n  // the style to use for the lines, optional.\n  strokeStyle: new Stroke({\n    color: 'rgba(255,120,0,0.9)',\n    width: 2,\n    lineDash: [0.5, 4],\n  }),\n  showLabels: true,\n  visible: false,\n  wrapX: false,\n});\n\nconst map = new Map({\n  layers: [\n    new TileLayer({\n      source: osmSource,\n    }),\n    debugLayer,\n    graticule,\n  ],\n  target: 'map',\n  view: new View({\n    projection: 'EPSG:3857',\n    center: [0, 0],\n    zoom: 1,\n  }),\n});\n\nconst queryInput = document.getElementById('epsg-query');\nconst searchButton = document.getElementById('epsg-search');\nconst resultSpan = document.getElementById('epsg-result');\nconst renderEdgesCheckbox = document.getElementById('render-edges');\nconst showTilesCheckbox = document.getElementById('show-tiles');\nconst showGraticuleCheckbox = document.getElementById('show-graticule');\n\nfunction setProjection(code, name, proj4def, bbox) {\n  if (code === null || name === null || proj4def === null || bbox === null) {\n    resultSpan.innerHTML = 'Nothing usable found, using EPSG:3857...';\n    map.setView(\n      new View({\n        projection: 'EPSG:3857',\n        center: [0, 0],\n        zoom: 1,\n      })\n    );\n    return;\n  }\n\n  resultSpan.innerHTML = '(' + code + ') ' + name;\n\n  const newProjCode = 'EPSG:' + code;\n  proj4.defs(newProjCode, proj4def);\n  register(proj4);\n  const newProj = getProjection(newProjCode);\n  const fromLonLat = getTransform('EPSG:4326', newProj);\n\n  let worldExtent = [bbox[1], bbox[2], bbox[3], bbox[0]];\n  newProj.setWorldExtent(worldExtent);\n\n  // approximate calculation of projection extent,\n  // checking if the world extent crosses the dateline\n  if (bbox[1] > bbox[3]) {\n    worldExtent = [bbox[1], bbox[2], bbox[3] + 360, bbox[0]];\n  }\n  const extent = applyTransform(worldExtent, fromLonLat, undefined, 8);\n  newProj.setExtent(extent);\n  const newView = new View({\n    projection: newProj,\n  });\n  map.setView(newView);\n  newView.fit(extent);\n}\n\nfunction search(query) {\n  resultSpan.innerHTML = 'Searching ...';\n  fetch('https://epsg.io/?format=json&q=' + query)\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (json) {\n      const results = json['results'];\n      if (results && results.length > 0) {\n        for (let i = 0, ii = results.length; i < ii; i++) {\n          const result = results[i];\n          if (result) {\n            const code = result['code'];\n            const name = result['name'];\n            const proj4def = result['wkt'];\n            const bbox = result['bbox'];\n            if (\n              code &&\n              code.length > 0 &&\n              proj4def &&\n              proj4def.length > 0 &&\n              bbox &&\n              bbox.length == 4\n            ) {\n              setProjection(code, name, proj4def, bbox);\n              return;\n            }\n          }\n        }\n      }\n      setProjection(null, null, null, null);\n    });\n}\n\n/**\n * Handle click event.\n * @param {Event} event The event.\n */\nsearchButton.onclick = function (event) {\n  search(queryInput.value);\n  event.preventDefault();\n};\n\n/**\n * Handle checkbox change events.\n */\nfunction onReprojectionChange() {\n  osmSource.setRenderReprojectionEdges(renderEdgesCheckbox.checked);\n}\nfunction onGraticuleChange() {\n  graticule.setVisible(showGraticuleCheckbox.checked);\n}\nfunction onTilesChange() {\n  debugLayer.setVisible(showTilesCheckbox.checked);\n}\nshowGraticuleCheckbox.addEventListener('change', onGraticuleChange);\nrenderEdgesCheckbox.addEventListener('change', onReprojectionChange);\nshowTilesCheckbox.addEventListener('change', onTilesChange);\n\nonReprojectionChange();\nonGraticuleChange();\nonTilesChange();\n"],"names":["osmSource","debugLayer","source","tileGrid","getTileGrid","projection","getProjection","visible","graticule","strokeStyle","color","width","lineDash","showLabels","wrapX","map","layers","target","view","center","zoom","queryInput","document","getElementById","searchButton","resultSpan","renderEdgesCheckbox","showTilesCheckbox","showGraticuleCheckbox","setProjection","code","name","proj4def","bbox","innerHTML","setView","newProjCode","defs","newProj","fromLonLat","worldExtent","setWorldExtent","extent","undefined","setExtent","newView","fit","onReprojectionChange","setRenderReprojectionEdges","checked","onGraticuleChange","setVisible","onTilesChange","onclick","event","query","value","fetch","then","response","json","results","length","i","ii","result","preventDefault","addEventListener"],"sourceRoot":""}