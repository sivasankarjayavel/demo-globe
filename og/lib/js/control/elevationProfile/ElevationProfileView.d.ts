import { EventsHandler } from "../../Events";
import { IViewParams, View, ViewEventsList } from '../../ui/View';
import { ElevationProfile, GroundItem, TrackItem } from './ElevationProfile';
import { MouseEventExt } from "../../input/MouseHandler";
interface IElevationProfileViewParams extends IViewParams {
    fillStyle?: string;
}
type ElevationProfileViewEventsList = ["startdrag", "stopdrag", "pointer", "mouseenter", "mouseleave", "dblclick", "tracklength", "groundlength", "warninglength", "collisionlength"];
declare class ElevationProfileView extends View<ElevationProfile> {
    events: EventsHandler<ElevationProfileViewEventsList> & EventsHandler<ViewEventsList>;
    fillStyle: string;
    protected _pixelsInMeter_x: number;
    protected _pixelsInMeter_y: number;
    protected _canvasScale: number;
    $canvas: HTMLCanvasElement;
    $pointerCanvas: HTMLCanvasElement;
    protected _ctx: CanvasRenderingContext2D;
    protected _pointerCtx: CanvasRenderingContext2D;
    protected _onResizeObserver_: () => void;
    protected _resizeObserver: ResizeObserver;
    $loading: HTMLElement | null;
    protected _isMouseOver: boolean;
    protected _isDragging: boolean;
    protected _clickPosX: number;
    protected _clickLeftDistance: number;
    protected _clickRightDistance: number;
    protected _leftDistance: number;
    protected _rightDistance: number;
    protected _customFrame: boolean;
    protected _timeStartHandler: number;
    constructor(options?: IElevationProfileViewParams);
    protected _onResizeObserver(): void;
    get canvasScale(): number;
    set canvasScale(scale: number);
    resize(): void;
    render(): this;
    protected _hideLoading(): void;
    protected _showLoading(): void;
    protected _onMouseDblClick: (e: MouseEvent) => void;
    protected _onMouseEnter: (e: MouseEvent) => void;
    protected _onMouseOut: (e: MouseEvent) => void;
    protected _onMouseDown: (e: MouseEvent) => void;
    protected _onMouseUp: (e: MouseEvent) => void;
    protected _onCanvasMouseMove: (e: MouseEvent) => void;
    redrawPointerCanvas(x: number): void;
    protected _onMouseMove: (e: MouseEvent) => void;
    protected _onMouseWheelFF: (e: MouseEventExt) => void;
    protected _onMouseWheel: (e: MouseEventExt) => void;
    get clientWidth(): number;
    get clientHeight(): number;
    protected _resize(): void;
    clearPointerCanvas(): void;
    clearCanvas(): void;
    setFrame(leftDistance: number, rightDistance: number): void;
    _updateUnits(): void;
    clear(): void;
    draw(): void;
    protected _drawLabels(coords: TrackItem[], groundCoords: GroundItem[]): void;
    protected _drawTrack(coords: TrackItem[], groundCoords: GroundItem[]): void;
    protected _drawTerrain(coords: number[][]): void;
    protected _drawWarningAndCollision(coords: number[][]): void;
}
export { ElevationProfileView };
